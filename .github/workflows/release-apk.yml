name: Release APK
permissions:
  contents: write  # 授予写入 repo 的权限
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name for the release'
        required: true
        default: '1.0.0'
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        default: ''
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Verify environment
      run: |
        echo "Java version:"
        java -version
        echo "Gradle version:"
        ./gradlew --version
        echo "Android SDK location: $ANDROID_HOME"
        
    - name: Create secrets.properties
      run: |
        # 只添加已配置的 secrets，没有配置的就跳过
        touch secrets.properties
        
        # 必要的变量
        if [ -n "${{ secrets.DEEPSEEK_API_KEY }}" ]; then
          echo "DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}" >> secrets.properties
        fi
        
        if [ -n "${{ secrets.CUSTOM_PROVIDER_API_BASE_URL }}" ]; then
          echo "CUSTOM_PROVIDER_API_BASE_URL=${{ secrets.CUSTOM_PROVIDER_API_BASE_URL }}" >> secrets.properties
        fi
        
        if [ -n "${{ secrets.CUSTOM_PROVIDER_API_KEY }}" ]; then
          echo "CUSTOM_PROVIDER_API_KEY=${{ secrets.CUSTOM_PROVIDER_API_KEY }}" >> secrets.properties
        fi
        
        # 可选的变量
        if [ -n "${{ secrets.AZURE_API_KEY }}" ]; then
          echo "azureApiKey=${{ secrets.AZURE_API_KEY }}" >> secrets.properties
        fi
        
        if [ -n "${{ secrets.AZURE_REGION }}" ]; then
          echo "azureRegion=${{ secrets.AZURE_REGION }}" >> secrets.properties
        fi
        
        if [ -n "${{ secrets.TEST_AI_HUB_MIX_TOKEN }}" ]; then
          echo "testAiHubMixToken=${{ secrets.TEST_AI_HUB_MIX_TOKEN }}" >> secrets.properties
        fi
        
        echo "Created secrets.properties with available secrets"
        echo "secrets.properties content (without sensitive data):"
        grep -v "API_KEY\|TOKEN" secrets.properties || echo "No non-sensitive properties to show"
        
    - name: Generate keystore from base64
      env:
        KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo "=== 从Base64生成keystore.jks ==="
        
        if [ -z "$KEYSTORE_BASE64" ]; then
            echo "❌ KEYSTORE_BASE64 为空"
            exit 1
        else
            echo "✅ KEYSTORE_BASE64 存在"
        fi
        
        echo "解码base64并生成keystore.jks..."
        echo "$KEYSTORE_BASE64" | base64 -d > keystore.jks
        
        echo "验证生成的keystore文件..."
        if [ -f "keystore.jks" ]; then
            echo "✅ keystore.jks 文件已生成"
            echo "文件大小: $(stat -c%s keystore.jks) bytes"
            echo "文件权限: $(ls -la keystore.jks)"
        else
            echo "❌ keystore.jks 文件生成失败"
            exit 1
        fi
        
        echo ""
        echo "2. 检查签名环境变量:"
        if [ -z "$KEYSTORE_PASSWORD" ]; then
            echo "❌ KEYSTORE_PASSWORD 为空"
            exit 1
        else
            echo "✅ KEYSTORE_PASSWORD 存在"
        fi
        
        if [ -z "$KEY_ALIAS" ]; then
            echo "❌ KEY_ALIAS 为空"
            exit 1
        else
            echo "✅ KEY_ALIAS 存在: $KEY_ALIAS"
        fi
        
        if [ -z "$KEY_PASSWORD" ]; then
            echo "❌ KEY_PASSWORD 为空"
            exit 1
        else
            echo "✅ KEY_PASSWORD 存在"
        fi
        
        echo ""
        echo "✅ 所有签名配置验证通过"

    - name: Create signing config
      env:
        KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
        KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
        KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
      run: |
        echo "=== 创建签名配置 ==="
        
        # 创建keystore.properties文件（本地开发用）
        cat > keystore.properties << EOF
        storeFile=keystore.jks
        storePassword=${{ secrets.KEYSTORE_PASSWORD }}
        keyAlias=${{ secrets.KEY_ALIAS }}
        keyPassword=${{ secrets.KEY_PASSWORD }}
        EOF
        
        # 设置Gradle属性（CI/CD环境用）
        echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> gradle.properties
        echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> gradle.properties
        echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> gradle.properties
        
        echo "✅ 签名配置创建完成"
        echo ""
        echo "keystore.properties content:"
        cat keystore.properties | sed 's/storePassword=.*/storePassword=*****/' | sed 's/keyPassword=.*/keyPassword=*****/'
        echo ""
        echo "gradle.properties content (signing part):"
        grep -E "(KEYSTORE_|KEY_)" gradle.properties | sed 's/=.*/=*****/' || echo "No signing properties found in gradle.properties"
        
    - name: Update version name
      if: ${{ github.event.inputs.version_name }}
      run: |
        sed -i 's/versionName = "[^"]*"/versionName = "${{ github.event.inputs.version_name }}"/' app/build.gradle.kts
        
    - name: Build Release APK
      run: |
        echo "Starting Gradle build..."
        ./gradlew assembleRelease --stacktrace --info
        
    - name: Verify APK and signing
      run: |
        echo "Checking build outputs..."
        ls -la app/build/outputs/apk/release/
        
        if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
          echo "✅ APK file found"
          
          # 验证APK签名
          if command -v $ANDROID_HOME/build-tools/34.0.0/apksigner &> /dev/null; then
            echo "Verifying APK signature..."
            $ANDROID_HOME/build-tools/34.0.0/apksigner verify --print-certs app/build/outputs/apk/release/app-release.apk
            echo "✅ APK signature verified"
          else
            echo "⚠️ apksigner not found, skipping signature verification"
          fi
          
          # 显示APK信息
          APK_SIZE=$(stat -c%s app/build/outputs/apk/release/app-release.apk)
          echo "📱 APK size: $(($APK_SIZE / 1024 / 1024)) MB"
        else
          echo "❌ APK file not found!"
          echo "Available files in release directory:"
          find app/build/outputs/apk/release/ -type f || echo "No files found"
          exit 1
        fi
          
    - name: Rename APK
      run: |
        VERSION_NAME=${{ github.event.inputs.version_name || github.ref_name }}
        mv app/build/outputs/apk/release/app-release.apk app/build/outputs/apk/release/AIGroupApp-${VERSION_NAME}.apk
        echo "✅ APK renamed to AIGroupApp-${VERSION_NAME}.apk"

    - name: Create tag for manual release
      if: github.event_name == 'workflow_dispatch'
      run: |
        VERSION_NAME=${{ github.event.inputs.version_name }}
        echo "Creating tag for version: $VERSION_NAME"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        
        # 检查标签是否已存在
        if git rev-parse "refs/tags/$VERSION_NAME" >/dev/null 2>&1; then
          echo "Tag $VERSION_NAME already exists, deleting it first"
          git tag -d "$VERSION_NAME" || true
          git push origin ":refs/tags/$VERSION_NAME" || true
        fi
        
        # 创建新标签
        git tag -a "$VERSION_NAME" -m "Release $VERSION_NAME (manual trigger)"
        git push origin "$VERSION_NAME"
        echo "✅ Tag $VERSION_NAME created and pushed"
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
      with:
        tag_name: ${{ github.event.inputs.version_name || github.ref_name }}
        name: Release ${{ github.event.inputs.version_name || github.ref_name }}
        files: app/build/outputs/apk/release/AIGroupApp-*.apk
        generate_release_notes: true
        draft: false
        prerelease: ${{ github.event.inputs.prerelease == 'true' || false }}
        make_latest: ${{ github.event.inputs.prerelease != 'true' }}
        body: |
          ## 🚀 AIGroup Mobile App Release ${{ github.event.inputs.version_name || github.ref_name }}
          
          ### 📱 下载安装包
          点击下方链接下载最新版本的 AIGroup Mobile App：
          
          **[📥 下载 AIGroupApp-${{ github.event.inputs.version_name || github.ref_name }}.apk](https://github.com/${{ github.repository }}/releases/download/${{ github.event.inputs.version_name || github.ref_name }}/AIGroupApp-${{ github.event.inputs.version_name || github.ref_name }}.apk)**
          
          ### 🔧 构建信息
          - **版本号**: `${{ github.event.inputs.version_name || github.ref_name }}`
          - **构建ID**: `${{ github.run_id }}`
          - **触发方式**: ${{ github.event_name == 'workflow_dispatch' && '🖱️ 手动触发' || '🏷️ 标签推送' }}
          - **提交SHA**: `${{ github.sha }}`
          - **构建时间**: ${{ github.run_started_at }}
          - **发布类型**: ${{ github.event.inputs.prerelease == 'true' && '🧪 预发布版本' || '✅ 正式版本' }}
          
          ### 📋 更新内容
          ${{ github.event.inputs.release_notes || (github.event_name == 'workflow_dispatch' && '此版本通过手动触发构建，详细更新内容请查看下方的自动生成发布说明或提交历史。' || '') }}
          
          ---
          
          ### 📖 安装说明
          1. 下载上方的 APK 文件
          2. 在 Android 设备上启用"未知来源"安装
          3. 安装下载的 APK 文件
          
          ### ⚠️ 注意事项
          - 请确保从官方 GitHub Release 页面下载
          - 首次安装可能需要允许安装未知来源的应用
          - 建议在安装前卸载旧版本以避免冲突
          ${{ github.event.inputs.prerelease == 'true' && '- ⚠️ 这是预发布版本，可能包含未完全测试的功能' || '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: release-apk-${{ github.event.inputs.version_name || github.ref_name }}
        path: app/build/outputs/apk/release/AIGroupApp-*.apk
        retention-days: 30
        
    - name: Release Summary
      if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
      run: |
        VERSION_NAME=${{ github.event.inputs.version_name || github.ref_name }}
        RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${VERSION_NAME}"
        APK_SIZE=$(stat -c%s app/build/outputs/apk/release/AIGroupApp-${VERSION_NAME}.apk)
        APK_SIZE_MB=$(($APK_SIZE / 1024 / 1024))
        
        echo "## 🎉 发布成功！" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 发布信息" >> $GITHUB_STEP_SUMMARY
        echo "- **版本**: \`${VERSION_NAME}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **APK 大小**: ${APK_SIZE_MB} MB" >> $GITHUB_STEP_SUMMARY
        echo "- **触发方式**: ${{ github.event_name == 'workflow_dispatch' && '手动触发' || '标签推送' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **发布类型**: ${{ github.event.inputs.prerelease == 'true' && '预发布版本' || '正式版本' }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 链接" >> $GITHUB_STEP_SUMMARY
        echo "- [📥 下载 Release]($RELEASE_URL)" >> $GITHUB_STEP_SUMMARY
        echo "- [📱 直接下载 APK](https://github.com/${{ github.repository }}/releases/download/${VERSION_NAME}/AIGroupApp-${VERSION_NAME}.apk)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ APK 已成功构建并发布到 GitHub Release！"